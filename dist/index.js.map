{"version":3,"file":"index.js","sources":["../src/utils.ts","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../src/control.ts","../src/validators.ts","../src/use-actions.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\nimport {ControlValidators} from \"./interfaces\";\n\n\nexport const chainValidators: <T>(validators: ControlValidators<T>) => ValidatorFn = (\n\tvalidators\n) => {\n\tif (!Array.isArray(validators.validators)) return (value: any) => null;\n\treturn (fieldValue) => {\n\t\tfor (const validator of validators.validators) {\n\t\t\tconst result = validator(fieldValue, validators.control);\n\t\t\tif (result) return result;\n\t\t}\n\t\treturn null;\n\t};\n};\n\nexport const validateIterated = <T>(\n\tvalidators: ControlValidators<T>,\n\tfieldValue: T\n) => {\n\tif (!Array.isArray(validators.validators)) return null;\n\tfor (const validator of validators.validators) {\n\t\tif (typeof validator === \"function\") {\n\t\t\ttry {\n\t\t\t\tconst result = validator(fieldValue, validators.control);\n\t\t\t\tif (result != null) return result;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(`validator error`, validator, e);\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { derived, get, Readable, writable, Writable } from \"svelte/store\";\nimport { validateIterated } from \"./utils\";\nimport { ValidationError, ValidatorFn } from \"./validators\";\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n\t$ControlState,\n\tControlBaseInterface,\n\tControlState,\n\tControlTypes,\n\tControlValidators,\n\tFormControlMeta\n} from \"./interfaces\";\n\n\n\nexport abstract class ControlBase<T = any> implements ControlBaseInterface<T> {\n\tpublic validators: Writable<ControlValidators<T>>;\n\n\tpublic meta: Writable<FormControlMeta>;\n\n\tpublic id: string = uuidv4()\n\n\tpublic label: string\n\n\tconstructor(\n\t\tvalidators: ValidatorFn<T>[],\n\t\tmeta?: FormControlMeta\n) {\n\t\tthis.validators = writable({validators, control: this});\n\t\tthis.meta = writable(meta ?? {});\n\t\tthis.label = meta?.name ?? '';\n\t}\n\t\n\tabstract value: Writable<T>;\n\n\tabstract state: Readable<ControlState<T>>;\n\n\tabstract child(path: string): ControlBaseInterface<T> | null;\n\n\tabstract reset(value?: T): void;\n\n\tabstract setTouched(touched: boolean): void;\n\n\tsetValidators(validators: ValidatorFn<T>[]) {\n\t\tif (!(Array.isArray(validators) && validators.length)) return;\n\t\tthis.validators.set({validators, control: this});\n\t}\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\tvalue = writable<T>(this.initial);\n\tprivate touched = writable(false);\n\n\tstate = derived<\n\t\t[Writable<T>, Writable<boolean>, Writable<ControlValidators<T>>, Writable<FormControlMeta>],\n\t\tControlState<T>\n\t>(\n\t\t[this.value, this.touched, this.validators,this.meta],\n\t\t([value, $touched, validators, meta], set) => {\n\t\t\tconst $dirty = this.initial !== value;\n\n\t\t\tconst $error = validateIterated(validators, value);\n\n\t\t\tlet $valid = true;\n\t\t\tlet $pending = false;\n\t\t\tlet $meta = meta;\n\t\t\tlet $type = 'control';\n\t\t\tif ($error != null && $error instanceof Promise) {\n\t\t\t\t$pending = true;\n\n\t\t\t\tset({\n\t\t\t\t\t$error: null,\n\t\t\t\t\t$valid,\n\t\t\t\t\t$touched,\n\t\t\t\t\t$dirty,\n\t\t\t\t\t$pending,\n\t\t\t\t\t$meta,\n\t\t\t\t\t$type\n\t\t\t\t} as ControlState<T>);\n\n\t\t\t\t$error\n\t\t\t\t\t.then((ret) => {\n\t\t\t\t\t\t$valid = ret == null;\n\t\t\t\t\t\t$pending = false;\n\t\t\t\t\t\tset({\n\t\t\t\t\t\t\t$error: ret,\n\t\t\t\t\t\t\t$valid,\n\t\t\t\t\t\t\t$touched,\n\t\t\t\t\t\t\t$dirty,\n\t\t\t\t\t\t\t$pending,\n\t\t\t\t\t\t\t$meta,\n\t\t\t\t\t\t\t$type\n\t\t\t\t\t\t} as ControlState<T>);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\tset({\n\t\t\t\t\t\t\t$error: {\n\t\t\t\t\t\t\t\tserverError: true,\n\t\t\t\t\t\t\t} as ValidationError<boolean>,\n\t\t\t\t\t\t\t$valid,\n\t\t\t\t\t\t\t$touched,\n\t\t\t\t\t\t\t$dirty,\n\t\t\t\t\t\t\t$pending,\n\t\t\t\t\t\t\t$meta,\n\t\t\t\t\t\t\t$type\n\t\t\t\t\t\t} as ControlState<T>);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t$valid = $error == null;\n\n\t\t\t\tset({\n\t\t\t\t\t$error,\n\t\t\t\t\t$valid,\n\t\t\t\t\t$touched,\n\t\t\t\t\t$dirty,\n\t\t\t\t\t$pending,\n\t\t\t\t\t$meta,\n\t\t\t\t\t$type\n\t\t\t\t} as ControlState<T>);\n\t\t\t}\n\t\t}\n\t);\n\n\tconstructor(\n\t\tprivate initial: T,\n\t\tvalidators: ValidatorFn<T>[] = [],\n\t\tmeta?: FormControlMeta\n\t) {\n\t\tsuper(validators, meta);\n\t}\n\n\tsetTouched(touched: boolean) {\n\t\tthis.touched.set(touched);\n\t}\n\n\tchild(): ControlBaseInterface<T> | null {\n\t\treturn null!;\n\t}\n\n\n\treset(value?: T) {\n\t\tif (value !== undefined) this.initial = value;\n\t\tthis.value.set(this.initial);\n\t\tthis.touched.set(false);\n\t}\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBaseInterface<T[K]> };\ntype ControlsState<T> = { [K in keyof T]: ControlState };\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\tprivate controlStore = writable<Controls<T>>({} as any);\n\n\tcontrols: Readable<Controls<T>> = {\n\t\tsubscribe: this.controlStore.subscribe,\n\t};\n\n\tprivate valueDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: Controls<T>, set: (value: T) => void) => {\n\t\t\tconst keys = Object.keys(controls) as Array<keyof T>;\n\t\t\tconst controlValues = keys.map((key) => controls[key].value);\n\t\t\tconst derivedValues = derived(\n\t\t\t\tcontrolValues as any,\n\t\t\t\t(values) =>\n\t\t\t\t\t(<any[]>values).reduce(\n\t\t\t\t\t\t(acc, value, index) => (\n\t\t\t\t\t\t\t(acc[keys[index]] = value), acc\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as T\n\t\t\t);\n\t\t\treturn derivedValues.subscribe(set);\n\t\t}\n\t);\n\n\tprivate touched = writable(false);\n\n\tprivate childStateDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: Controls<T>, set: (value: ControlsState<T>) => void) => {\n\t\t\tconst keys = Object.keys(controls) as Array<keyof T>;\n\t\t\tconst controlStates = keys.map((key) => controls[key].state);\n\t\t\tconst derivedStates = derived(\n\t\t\t\tcontrolStates as any,\n\t\t\t\t(states) =>\n\t\t\t\t\t(<any[]>states).reduce(\n\t\t\t\t\t\t(acc, state, index) => (\n\t\t\t\t\t\t\t(acc[keys[index]] = state), acc\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as ControlsState<T>\n\t\t\t);\n\t\t\treturn derivedStates.subscribe(set);\n\t\t}\n\t);\n\n\tvalue: Writable<T> = {\n\t\tsubscribe: this.valueDerived.subscribe,\n\t\tset: (value) => this.setValue(value),\n\t\tupdate: (updater) => this.setValue(updater(get(this.valueDerived))),\n\t};\n\n\tstate = derived(\n\t\t[this.valueDerived, this.childStateDerived, this.validators, this.touched, this.meta],\n\t\t([value, childState, validators, touched, meta]) => {\n\t\t\tconst children: Record<string, $ControlState> = {};\n\t\t\tlet childrenValid = true;\n\t\t\tlet $touched = touched;\n\t\t\tlet $dirty = false;\n\t\t\tlet $pending = false;\n\t\t\tlet $meta = meta;\n\t\t\tlet $type = 'group';\n\t\t\tfor (const key of Object.keys(childState)) {\n\t\t\t\tconst state = (children[key] = (childState as any)[\n\t\t\t\t\tkey\n\t\t\t\t] as $ControlState);\n\t\t\t\tchildrenValid = childrenValid && state.$valid;\n\t\t\t\t$touched = $touched || state.$touched;\n\t\t\t\t$dirty = $dirty || state.$dirty;\n\t\t\t\t$pending = $pending || state.$pending;\n\t\t\t}\n\t\t\tconst $error = validateIterated(validators, value);\n\t\t\tconst $valid = $error == null && childrenValid;\n\t\t\treturn {\n\t\t\t\t$error,\n\t\t\t\t$valid,\n\t\t\t\t$touched,\n\t\t\t\t$dirty,\n\t\t\t\t$pending,\n\t\t\t\t$meta,\n\t\t\t\t$type,\n\t\t\t\t...children,\n\t\t\t} as ControlState<T>;\n\t\t}\n\t);\n\n\tconstructor(\n\t\tcontrols: Controls<T>, \n\t\tvalidators: ValidatorFn<T>[] = [],\n\t\tmeta?: FormControlMeta\n\t) {\n\t\tsuper(validators, meta);\n\t\tthis.controlStore.set(controls);\n\t}\n\n\tprivate iterateControls<K extends keyof T>(\n\t\tcallback: (args: [K, ControlBaseInterface<T[K]>]) => void\n\t) {\n\t\tconst controls = get(this.controlStore);\n\t\t(<[K, ControlBaseInterface<T[K]>][]>Object.entries(controls)).forEach(callback);\n\t}\n\n\tprivate setValue(value: T) {\n\t\tthis.iterateControls(([key, control]) => {\n\t\t\tconst controlValue = (value && value[key]) ?? null;\n\t\t\tcontrol.value.set(controlValue!);\n\t\t});\n\t}\n\tprivate patchValue(value: T) {\n\t\tconst currentValue = get(this.valueDerived);\n\t\tthis.setValue({...currentValue, ...value});\n\t}\n\n\taddControl(key: string, control: ControlBase) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (((<any>controls)[key] = control), controls)\n\t\t);\n\t}\n\n\tremoveControl(key: string) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (delete (<any>controls)[key], controls)\n\t\t);\n\t}\n\n\tsetTouched(touched: boolean) {\n\t\tthis.iterateControls(([_, control]) => {\n\t\t\tcontrol.setTouched(touched);\n\t\t});\n\t\tthis.touched.set(touched);\n\t}\n\n\tchild(path: string): ControlBaseInterface<T> | null {\n\t\tconst [_, name, rest] = path.match(objectPath) || [];\n\t\tconst controls = get(this.controlStore);\n\t\tconst control =\n\t\t\t(name && ((controls as any)[name] as ControlBase)) || null;\n\t\tif (!control) return null!;\n\t\treturn rest ? control.child(rest) : control;\n\t}\n\n\treset(value?: T) {\n\t\tthis.iterateControls(([key, control]) => {\n\t\t\tconst controlValue = (value && value[key]) || null;\n\t\t\tcontrol.reset(controlValue!);\n\t\t});\n\t}\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\tprivate controlStore = writable(this._controls);\n\n\tprivate touched = writable(false);\n\n\tcontrols: Readable<ControlBaseInterface<T>[]> = {\n\t\tsubscribe: this.controlStore.subscribe,\n\t};\n\n\tprivate valueDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: ControlBaseInterface<T>[], set: (value: T[]) => void) => {\n\t\t\tconst derivedValues = derived(\n\t\t\t\tcontrols.map((control) => control.value) as any,\n\t\t\t\t(values) => values as T[]\n\t\t\t);\n\t\t\treturn derivedValues.subscribe(set);\n\t\t}\n\t);\n\n\tprivate childStateDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: ControlBaseInterface<T>[], set: (value: $ControlState[]) => void) => {\n\t\t\tconst derivedStates = derived(\n\t\t\t\tcontrols.map((control) => control.state) as any,\n\t\t\t\t(values) => values as $ControlState[]\n\t\t\t);\n\t\t\treturn derivedStates.subscribe(set);\n\t\t}\n\t);\n\n\tvalue: Writable<T[]> = {\n\t\tsubscribe: this.valueDerived.subscribe,\n\t\tset: (value) => this.setValue(value),\n\t\tupdate: (updater) => this.setValue(updater(get(this.valueDerived))),\n\t};\n\n\tstate = derived(\n\t\t[this.valueDerived, this.childStateDerived, this.validators, this.touched],\n\t\t([value, childState, validators, touched]) => {\n\t\t\tconst arrayState = {} as $ControlState & { list: $ControlState[] };\n\t\t\tarrayState.list = [];\n\t\t\tlet childrenValid = true;\n\t\t\tarrayState.$touched = touched;\n\t\t\tfor (let i = 0, len = childState.length; i < len; i++) {\n\t\t\t\tconst state = childState[i];\n\t\t\t\tarrayState.list[i] = state;\n\t\t\t\tchildrenValid = childrenValid && state.$valid;\n\t\t\t\tarrayState.$touched = arrayState.$touched || state.$touched || false;\n\t\t\t\tarrayState.$dirty = arrayState.$dirty || state.$dirty;\n\t\t\t}\n\t\t\tarrayState.$error = validateIterated(validators, value, );\n\t\t\tarrayState.$valid = arrayState.$error == null && childrenValid;\n\t\t\tarrayState.$meta = get(this.meta);\n\t\t\tarrayState.$type = 'array';\n\n\t\t\treturn arrayState as ControlState<T[]>;\n\t\t}\n\t);\n\n\tconstructor(\n\t\tprivate readonly _controls: ControlBaseInterface<T>[],\n\t\tvalidators: ValidatorFn<T[]>[] = [],\n\t\tmeta?: FormControlMeta\n\t) {\n\t\tsuper(validators, meta);\n\t}\n\n\tprivate iterateControls(\n\t\tcallback: (control: ControlBaseInterface<T>, index: number) => void\n\t) {\n\t\tconst controls: ControlBaseInterface<T>[] = get(this.controlStore);\n\t\tcontrols.forEach(callback);\n\t}\n\n\tprivate sortArray(val: ControlBaseInterface<T>[]) {\n\t\tconst currentControls = get(this.controlStore);\n\t\tlet newOrderIds = val.map((control) => control.id);\n\t\tlet newOrder = newOrderIds.map((id) => currentControls.find((control) => control.id === id));\n\t\tnewOrder = newOrder.filter((control) => control !== undefined) ;\n\t\tthis.controlStore.set(newOrder as ControlBaseInterface<T>[]);\n\n\t}\n\tprivate setValue(value: T[]) {\n\t\tthis.iterateControls((control, index) => {\n\t\t\tconst controlValue = (value && value[index]) || null;\n\t\t\tcontrol.value.set(controlValue!);\n\t\t});\n\t}\n\n\tsetTouched(touched: boolean) {\n\t\tthis.touched.set(touched);\n\t\tthis.iterateControls((control) => control.setTouched(touched));\n\t}\n\n\tpushControl(control: ControlBaseInterface<T>) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (controls.push(control), controls)\n\t\t);\n\t}\n\n\taddControlAt(index: number, control: ControlBaseInterface<T>) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (controls.splice(index, 0, control), controls)\n\t\t);\n\t}\n\n\tremoveControlAt(index: number) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (controls.splice(index, 1), controls)\n\t\t);\n\t}\n\n\tremoveControl(control: ControlBaseInterface<T>) {\n\t\tthis.controlStore.update((controls) =>\n\t\t\tcontrols.filter((c) => c !== control)\n\t\t);\n\t}\n\n\tslice(start?: number, end?: number) {\n\t\tthis.controlStore.update((controls) => controls.slice(start, end));\n\t}\n\n\t//@ts-ignore\n\tchild(path: string): ControlBaseInterface<T> | null {\n\t\tconst [_, index, rest] = path.match(arrayPath) || [];\n\t\tconst controls: ControlBaseInterface<T>[] = get(this.controlStore);\n\t\tconst control = (index != null && controls[+index]) || null;\n\t\tif (!control) return null!;\n\t\treturn rest ? control.child(rest) : control;\n\t}\n\n\treset(value?: T[]) {\n\t\tthis.iterateControls((control, index) => {\n\t\t\tconst controlValue = (value && value[index]) || null;\n\t\t\tcontrol.reset(controlValue!);\n\t\t});\n\t}\n}\n","import {ControlBase} from \"./control\";\n\nexport interface ValidationError<D = any> {\n\t[name: string]: D;\n}\n\nexport type ValidatorFn<T = any, D = any> = (fieldValue: T, control: ControlBase) => ValidationError<D> | null;\n\ntype ValidatorFactory<C = unknown, T = any, D = any> = (config: C) => ValidatorFn<T, D>;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFn<string | number | boolean, boolean> = value => {\n\tlet stringValue = value != null && value !== false ? `${value}`.trim() : '';\n\treturn stringValue !== '' ? null : { required: true };\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFn<string, boolean> = email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : { email: true };\n};\n\nexport const minLength: ValidatorFactory<number, string, number> = min => value => {\n\tconst valid = empty(value) || min == null || `${value}`.trim().length >= min;\n\treturn valid ? null : { minLength: min };\n};\n\nexport const maxLength: ValidatorFactory<number, string, number> = max => value => {\n\tconst valid = empty(value) || max == null || `${value}`.trim().length <= max;\n\treturn valid ? null : { maxLength: max };\n};\n\nexport const number: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number);\n\treturn valid ? null : { number: true };\n};\n\nconst decimalFormat = /^\\d*\\.?\\d+$/;\nexport const decimal: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : { decimal: true };\n};\n\nconst intFormat = /^\\d+$/;\nexport const integer: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && intFormat.test(`${number}`);\n\treturn valid ? null : { integer: true };\n};\n\n\nexport const min: ValidatorFactory<number, string | number, number> = min => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (min == null || number >= min);\n\treturn valid ? null : { min };\n};\n\nexport const max: ValidatorFactory<number, string | number, number> = max => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (max == null || number <= max);\n\treturn valid ? null : { max };\n};\n\nexport const pattern: ValidatorFactory<RegExp, string, string> = re => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : { pattern: `${re}`};\n};\n","import { get, Readable } from 'svelte/store';\nimport {Control} from \"./control\";\nimport {$ControlState} from \"./interfaces\";\n\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tif ((<$ControlState>get(control.state)).$touched) return;\n\t\tcontrol.setTouched(true);\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n"],"names":["validateIterated","validators","fieldValue","Array","isArray","validator","result","control","e","console","error","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","v4","options","buf","offset","rnds","random","arr","arguments","length","undefined","toLowerCase","TypeError","stringify","ControlBase","[object Object]","meta","this","uuidv4","writable","label","name","set","Control","initial","super","derived","value","touched","$touched","$dirty","$error","$valid","$pending","$meta","$type","Promise","then","ret","catch","err","serverError","objectPath","arrayPath","empty","emailFormat","decimalFormat","intFormat","_controls","subscribe","controlStore","controls","map","values","state","valueDerived","setValue","update","updater","get","childStateDerived","childState","arrayState","list","childrenValid","len","callback","forEach","val","currentControls","newOrder","id","find","filter","iterateControls","index","controlValue","setTouched","splice","c","start","end","slice","path","_","rest","match","child","reset","keys","Object","controlValues","key","reduce","acc","controlStates","states","children","entries","currentValue","el","classList","stateSub","add","remove","eventNames","touchedFn","eventName","addEventListener","removeEventListener","number","isNaN","decimal","email","integer","max","trim","maxLength","min","minLength","re","text","pattern","required"],"mappings":"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"}