{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/control.ts","../src/use-actions.ts","../src/validators.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\n\nexport const chainValidators: (validators: ValidatorFn[]) => ValidatorFn = (\n\tvalidators\n) => {\n\tif (!Array.isArray(validators)) return (value: any) => null;\n\treturn (fieldValue) => {\n\t\tfor (const validator of validators) {\n\t\t\tconst result = validator(fieldValue);\n\t\t\tif (result) return result;\n\t\t}\n\t\treturn null;\n\t};\n};\n\nexport const validateIterated = <T>(\n\tvalidators: ValidatorFn<T>[],\n\tfieldValue: T\n) => {\n\tif (!Array.isArray(validators)) return null;\n\tfor (const validator of validators) {\n\t\tif (typeof validator === \"function\") {\n\t\t\ttry {\n\t\t\t\tconst result = validator(fieldValue);\n\t\t\t\tif (result != null) return result;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(`validator error`, validator, e);\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n","import { derived, get, Readable, writable, Writable } from \"svelte/store\";\nimport { validateIterated } from \"./utils\";\nimport { ValidationError, ValidatorFn } from \"./validators\";\n\ntype GroupValue<T> = { [K in keyof T]: T[K] };\n\ntype ControlTypes = string | number | boolean;\nexport interface FormControlMeta{\n\tname?: string;\n\thelperText?: any;\n\tplaceholder?: string,\n\tvisible?: boolean;\n\ttranslate?: boolean,\n\tselectValues?: any[]\n\tlanguage_dependent?: boolean,\n\ttype?: string;\n\terrorMessages?: {[key: string]: string | (() => string)};\n\temptyControl?: any\n\t[key: string]: any;\n}\n\nexport interface $ControlState {\n\t$error: ValidationError | null;\n\n\t$valid: boolean;\n\n\t$touched: boolean;\n\n\t$dirty: boolean;\n\n\t$pending: boolean;\n\n\t$meta: FormControlMeta;\n\n\t$type: 'control' | 'group' | 'array';\n\n\t$label: string,\n}\n\ntype ControlState<T = any> = T extends (infer K)[]\n\t? $ControlState & { list: Array<ControlState<K>> }\n\t: T extends ControlTypes\n\t? $ControlState\n\t: T extends GroupValue<T>\n\t? { [K in keyof T]: ControlState<T[K]> & $ControlState }\n\t: $ControlState;\n\nexport abstract class ControlBase<T = any> {\n\tpublic validators: Writable<ValidatorFn<T>[]>;\n\n\tprotected meta: Writable<FormControlMeta>;\n\n\tprotected label: string\n\n\tconstructor(\n\t\tvalidators: ValidatorFn<T>[],\n\t\tmeta?: FormControlMeta\n) {\n\t\tthis.validators = writable(validators);\n\t\tthis.meta = writable(meta ?? {});\n\t\tthis.label = meta?.name ?? '';\n\t}\n\t\n\tabstract value: Writable<T>;\n\n\tabstract state: Readable<ControlState<T>>;\n\n\tabstract child(path: string): ControlBase;\n\n\tabstract reset(value?: T): void;\n\n\tabstract setTouched(touched: boolean): void;\n\n\tsetValidators(validators: ValidatorFn<T>[]) {\n\t\tif (!(Array.isArray(validators) && validators.length)) return;\n\t\tthis.validators.set(validators);\n\t}\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\tvalue = writable<T>(this.initial);\n\tprivate touched = writable(false);\n\n\tstate = derived<\n\t\t[Writable<T>, Writable<boolean>, Writable<ValidatorFn<T>[]>],\n\t\tControlState<T>\n\t>(\n\t\t[this.value, this.touched, this.validators],\n\t\t([value, $touched, validators], set) => {\n\t\t\tconst $dirty = this.initial !== value;\n\n\t\t\tconst $error = validateIterated(validators, value);\n\n\t\t\tlet $valid = true;\n\t\t\tlet $pending = false;\n\t\t\tlet $meta = get(this.meta)\n\t\t\tlet $type = 'control';\n\t\t\tif ($error != null && $error instanceof Promise) {\n\t\t\t\t$pending = true;\n\n\t\t\t\tset({\n\t\t\t\t\t$error: null,\n\t\t\t\t\t$valid,\n\t\t\t\t\t$touched,\n\t\t\t\t\t$dirty,\n\t\t\t\t\t$pending,\n\t\t\t\t\t$meta,\n\t\t\t\t\t$type\n\t\t\t\t} as ControlState<T>);\n\n\t\t\t\t$error\n\t\t\t\t\t.then((ret) => {\n\t\t\t\t\t\t$valid = ret == null;\n\t\t\t\t\t\t$pending = false;\n\t\t\t\t\t\tset({\n\t\t\t\t\t\t\t$error: ret,\n\t\t\t\t\t\t\t$valid,\n\t\t\t\t\t\t\t$touched,\n\t\t\t\t\t\t\t$dirty,\n\t\t\t\t\t\t\t$pending,\n\t\t\t\t\t\t\t$meta,\n\t\t\t\t\t\t\t$type\n\t\t\t\t\t\t} as ControlState<T>);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\tset({\n\t\t\t\t\t\t\t$error: {\n\t\t\t\t\t\t\t\tserverError: true,\n\t\t\t\t\t\t\t} as ValidationError<boolean>,\n\t\t\t\t\t\t\t$valid,\n\t\t\t\t\t\t\t$touched,\n\t\t\t\t\t\t\t$dirty,\n\t\t\t\t\t\t\t$pending,\n\t\t\t\t\t\t\t$meta,\n\t\t\t\t\t\t\t$type\n\t\t\t\t\t\t} as ControlState<T>);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t$valid = $error == null;\n\n\t\t\t\tset({\n\t\t\t\t\t$error,\n\t\t\t\t\t$valid,\n\t\t\t\t\t$touched,\n\t\t\t\t\t$dirty,\n\t\t\t\t\t$pending,\n\t\t\t\t\t$meta,\n\t\t\t\t\t$type\n\t\t\t\t} as ControlState<T>);\n\t\t\t}\n\t\t}\n\t);\n\n\tconstructor(\n\t\tprivate initial: T,\n\t\tvalidators: ValidatorFn<T>[] = [],\n\t\tmeta?: FormControlMeta\n\t) {\n\t\tsuper(validators, meta);\n\t}\n\n\tsetTouched(touched: boolean) {\n\t\tthis.touched.set(touched);\n\t}\n\n\tchild() {\n\t\treturn null!;\n\t}\n\n\n\treset(value?: T) {\n\t\tif (value !== undefined) this.initial = value;\n\t\tthis.value.set(this.initial);\n\t\tthis.touched.set(false);\n\t}\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBase<T[K]> };\ntype ControlsState<T> = { [K in keyof T]: $ControlState };\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\tprivate controlStore = writable<Controls<T>>({} as any);\n\n\tcontrols: Readable<Controls<T>> = {\n\t\tsubscribe: this.controlStore.subscribe,\n\t};\n\n\tprivate valueDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: Controls<T>, set: (value: T) => void) => {\n\t\t\tconst keys = Object.keys(controls) as Array<keyof T>;\n\t\t\tconst controlValues = keys.map((key) => controls[key].value);\n\t\t\tconst derivedValues = derived(\n\t\t\t\tcontrolValues as any,\n\t\t\t\t(values) =>\n\t\t\t\t\t(<any[]>values).reduce(\n\t\t\t\t\t\t(acc, value, index) => (\n\t\t\t\t\t\t\t(acc[keys[index]] = value), acc\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as T\n\t\t\t);\n\t\t\treturn derivedValues.subscribe(set);\n\t\t}\n\t);\n\n\tprivate touched = writable(false);\n\n\tprivate childStateDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: Controls<T>, set: (value: ControlsState<T>) => void) => {\n\t\t\tconst keys = Object.keys(controls) as Array<keyof T>;\n\t\t\tconst controlStates = keys.map((key) => controls[key].state);\n\t\t\tconst derivedStates = derived(\n\t\t\t\tcontrolStates as any,\n\t\t\t\t(states) =>\n\t\t\t\t\t(<any[]>states).reduce(\n\t\t\t\t\t\t(acc, state, index) => (\n\t\t\t\t\t\t\t(acc[keys[index]] = state), acc\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as ControlsState<T>\n\t\t\t);\n\t\t\treturn derivedStates.subscribe(set);\n\t\t}\n\t);\n\n\tvalue: Writable<T> = {\n\t\tsubscribe: this.valueDerived.subscribe,\n\t\tset: (value) => this.setValue(value),\n\t\tupdate: (updater) => this.setValue(updater(get(this.valueDerived))),\n\t};\n\n\tstate = derived(\n\t\t[this.valueDerived, this.childStateDerived, this.validators, this.touched],\n\t\t([value, childState, validators, touched]) => {\n\t\t\tconst children: Record<string, $ControlState> = {};\n\t\t\tlet childrenValid = true;\n\t\t\tlet $touched = touched;\n\t\t\tlet $dirty = false;\n\t\t\tlet $pending = false;\n\t\t\tlet $meta = get(this.meta);\n\t\t\tlet $type = 'group';\n\t\t\tfor (const key of Object.keys(childState)) {\n\t\t\t\tconst state = (children[key] = (childState as any)[\n\t\t\t\t\tkey\n\t\t\t\t] as $ControlState);\n\t\t\t\tchildrenValid = childrenValid && state.$valid;\n\t\t\t\t$touched = $touched || state.$touched;\n\t\t\t\t$dirty = $dirty || state.$dirty;\n\t\t\t\t$pending = $pending || state.$pending;\n\t\t\t}\n\t\t\tconst $error = validateIterated(validators, value);\n\t\t\tconst $valid = $error == null && childrenValid;\n\t\t\treturn {\n\t\t\t\t$error,\n\t\t\t\t$valid,\n\t\t\t\t$touched,\n\t\t\t\t$dirty,\n\t\t\t\t$pending,\n\t\t\t\t$meta,\n\t\t\t\t$type,\n\t\t\t\t...children,\n\t\t\t} as ControlState<T>;\n\t\t}\n\t);\n\n\tconstructor(\n\t\tcontrols: Controls<T>, \n\t\tvalidators: ValidatorFn<T>[] = [],\n\t\tmeta?: FormControlMeta\n\t) {\n\t\tsuper(validators, meta);\n\t\tthis.controlStore.set(controls);\n\t}\n\n\tprivate iterateControls<K extends keyof T>(\n\t\tcallback: (args: [K, ControlBase<T[K]>]) => void\n\t) {\n\t\tconst controls = get(this.controlStore);\n\t\t(<[K, ControlBase<T[K]>][]>Object.entries(controls)).forEach(callback);\n\t}\n\n\tprivate setValue(value: T) {\n\t\tthis.iterateControls(([key, control]) => {\n\t\t\tconst controlValue = (value && value[key]) ?? null;\n\t\t\tcontrol.value.set(controlValue!);\n\t\t});\n\t}\n\tprivate patchValue(value: T) {\n\t\tconst currentValue = get(this.valueDerived);\n\t\tthis.setValue({...currentValue, ...value});\n\t}\n\n\taddControl(key: string, control: ControlBase) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (((<any>controls)[key] = control), controls)\n\t\t);\n\t}\n\n\tremoveControl(key: string) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (delete (<any>controls)[key], controls)\n\t\t);\n\t}\n\n\tsetTouched(touched: boolean) {\n\t\tthis.iterateControls(([_, control]) => {\n\t\t\tcontrol.setTouched(touched);\n\t\t});\n\t\tthis.touched.set(touched);\n\t}\n\n\tchild(path: string) {\n\t\tconst [_, name, rest] = path.match(objectPath) || [];\n\t\tconst controls = get(this.controlStore);\n\t\tconst control =\n\t\t\t(name && ((controls as any)[name] as ControlBase)) || null;\n\t\tif (!control) return null!;\n\t\treturn rest ? control.child(rest) : control;\n\t}\n\n\treset(value?: T) {\n\t\tthis.iterateControls(([key, control]) => {\n\t\t\tconst controlValue = (value && value[key]) || null;\n\t\t\tcontrol.reset(controlValue!);\n\t\t});\n\t}\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\tprivate controlStore = writable(this._controls);\n\n\tprivate touched = writable(false);\n\n\tcontrols: Readable<ControlBase<T>[]> = {\n\t\tsubscribe: this.controlStore.subscribe,\n\t};\n\n\tprivate valueDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: ControlBase<T>[], set: (value: T[]) => void) => {\n\t\t\tconst derivedValues = derived(\n\t\t\t\tcontrols.map((control) => control.value) as any,\n\t\t\t\t(values) => values as T[]\n\t\t\t);\n\t\t\treturn derivedValues.subscribe(set);\n\t\t}\n\t);\n\n\tprivate childStateDerived = derived(\n\t\tthis.controlStore,\n\t\t(controls: ControlBase<T>[], set: (value: $ControlState[]) => void) => {\n\t\t\tconst derivedStates = derived(\n\t\t\t\tcontrols.map((control) => control.state) as any,\n\t\t\t\t(values) => values as $ControlState[]\n\t\t\t);\n\t\t\treturn derivedStates.subscribe(set);\n\t\t}\n\t);\n\n\tvalue: Writable<T[]> = {\n\t\tsubscribe: this.valueDerived.subscribe,\n\t\tset: (value) => this.setValue(value),\n\t\tupdate: (updater) => this.setValue(updater(get(this.valueDerived))),\n\t};\n\n\tstate = derived(\n\t\t[this.valueDerived, this.childStateDerived, this.validators, this.touched],\n\t\t([value, childState, validators, touched]) => {\n\t\t\tconsole.log('setup state');\n\t\t\tconst arrayState = {} as $ControlState & { list: $ControlState[] };\n\t\t\tarrayState.list = [];\n\t\t\tlet childrenValid = true;\n\t\t\tarrayState.$touched = touched;\n\t\t\tfor (let i = 0, len = childState.length; i < len; i++) {\n\t\t\t\tconsole.log({i});\n\t\t\t\tconst state = childState[i];\n\t\t\t\tarrayState.list[i] = state;\n\t\t\t\tchildrenValid = childrenValid && state.$valid;\n\t\t\t\tarrayState.$touched = arrayState.$touched || state.$touched;\n\t\t\t\tarrayState.$dirty = arrayState.$dirty || state.$dirty;\n\t\t\t}\n\t\t\tarrayState.$error = validateIterated(validators, value);\n\t\t\tarrayState.$valid = arrayState.$error == null && childrenValid;\n\t\t\tarrayState.$meta = get(this.meta);\n\t\t\tarrayState.$type = 'array';\n\n\t\t\treturn arrayState as ControlState<T[]>;\n\t\t}\n\t);\n\n\tconstructor(\n\t\tprivate readonly _controls: ControlBase<T>[],\n\t\tvalidators: ValidatorFn<T[]>[] = [],\n\t\tmeta?: FormControlMeta\n\t) {\n\t\tsuper(validators, meta);\n\t}\n\n\tprivate iterateControls(\n\t\tcallback: (control: ControlBase<T>, index: number) => void\n\t) {\n\t\tconst controls: ControlBase<T>[] = get(this.controlStore);\n\t\tcontrols.forEach(callback);\n\t}\n\n\tprivate setValue(value: T[]) {\n\t\tthis.iterateControls((control, index) => {\n\t\t\tconst controlValue = (value && value[index]) || null;\n\t\t\tcontrol.value.set(controlValue!);\n\t\t});\n\t}\n\n\tsetTouched(touched: boolean) {\n\t\tthis.iterateControls((control) => control.setTouched(touched));\n\t\tthis.touched.set(touched);\n\t\tconsole.log('setTouched');\n\t}\n\n\tpushControl(control: ControlBase<T>) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (controls.push(control), controls)\n\t\t);\n\t}\n\n\taddControlAt(index: number, control: ControlBase<T>) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (controls.splice(index, 0, control), controls)\n\t\t);\n\t}\n\n\tremoveControlAt(index: number) {\n\t\tthis.controlStore.update(\n\t\t\t(controls) => (controls.splice(index, 1), controls)\n\t\t);\n\t}\n\n\tremoveControl(control: ControlBase<T>) {\n\t\tthis.controlStore.update((controls) =>\n\t\t\tcontrols.filter((c) => c !== control)\n\t\t);\n\t}\n\n\tslice(start?: number, end?: number) {\n\t\tthis.controlStore.update((controls) => controls.slice(start, end));\n\t}\n\n\tchild(path: string) {\n\t\tconst [_, index, rest] = path.match(arrayPath) || [];\n\t\tconst controls: ControlBase<T>[] = get(this.controlStore);\n\t\tconst control = (index != null && controls[+index]) || null;\n\t\tif (!control) return null!;\n\t\treturn rest ? control.child(rest) : control;\n\t}\n\n\treset(value?: T[]) {\n\t\tthis.iterateControls((control, index) => {\n\t\t\tconst controlValue = (value && value[index]) || null;\n\t\t\tcontrol.reset(controlValue!);\n\t\t});\n\t}\n}\n","import { get, Readable } from 'svelte/store';\nimport { $ControlState, Control, ControlBase } from \"./control\";\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tif ((<$ControlState>get(control.state)).$touched) return;\n\t\tcontrol.setTouched(true);\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n","export interface ValidationError<D = any> {\n\t[name: string]: D;\n}\n\nexport type ValidatorFn<T = any, D = any> = (fieldValue: T) => ValidationError<D> | null;\n\ntype ValidatorFactory<C = unknown, T = any, D = any> = (config: C) => ValidatorFn<T, D>;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFn<string | number | boolean, boolean> = value => {\n\tlet stringValue = value != null && value !== false ? `${value}`.trim() : '';\n\treturn stringValue !== '' ? null : { required: true };\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFn<string, boolean> = email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : { email: true };\n};\n\nexport const minLength: ValidatorFactory<number, string, number> = min => value => {\n\tconst valid = empty(value) || min == null || `${value}`.trim().length >= min;\n\treturn valid ? null : { minLength: min };\n};\n\nexport const maxLength: ValidatorFactory<number, string, number> = max => value => {\n\tconst valid = empty(value) || max == null || `${value}`.trim().length <= max;\n\treturn valid ? null : { maxLength: max };\n};\n\nexport const number: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number);\n\treturn valid ? null : { number: true };\n};\n\nconst decimalFormat = /^\\d*\\.?\\d+$/;\nexport const decimal: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : { decimal: true };\n};\n\nconst intFormat = /^\\d+$/;\nexport const integer: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && intFormat.test(`${number}`);\n\treturn valid ? null : { integer: true };\n};\n\n\nexport const min: ValidatorFactory<number, string | number, number> = min => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (min == null || number >= min);\n\treturn valid ? null : { min };\n};\n\nexport const max: ValidatorFactory<number, string | number, number> = max => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (max == null || number <= max);\n\treturn valid ? null : { max };\n};\n\nexport const pattern: ValidatorFactory<RegExp, string, string> = re => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : { pattern: `${re}`};\n};\n"],"names":[],"mappings":"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"}